package ciscowlc;
##
## $Id: ciscowlc.pm.in 3444 2016-08-10 16:25:47Z heas $
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  ciscowlc.pm - Cisco WLC V4.X
#
#  based on modified version of ciscoips by Josh Yost on 4/16/2008
use 5.010;
use strict 'vars';
use warnings;
no warnings 'uninitialized';
require(Exporter);
our @ISA = qw(Exporter);

use rancid @VERSION@;

@ISA = qw(Exporter rancid main);
#XXX @Exporter::EXPORT = qw($VERSION @commandtable %commands @commands);

# load-time initialization
sub import {
    $timeo = 90;			# wlogin timeout in seconds
    0;
}

# post-open(collection file) initialization
sub init {
    # add content lines and separators
    ProcessHistory("","","","!RANCID-CONTENT-TYPE: $devtype\n!\n");

    0;
}

# main loop of input of device output
sub inloop {
    my($INPUT, $OUTPUT) = @_;
    my($cmd, $rval);

TOP: while(<$INPUT>) {
	tr/\015//d;
	if (/^.*logout(Connection.*closed.)?$/)  {
	    $clean_run = 1;
	    last;
	}
	if (/^Error:/) {
	    print STDOUT ("$host wlogin error: $_");
	    print STDERR ("$host wlogin error: $_") if ($debug);
	    $clean_run = 0;
	    last;
	}
	while (/($cmds_regexp)/) {
	    $cmd = $1;
	    if (!defined($prompt)) {
		$prompt = ($_ =~ /^([^#]+>)/)[0];
		$prompt =~ s/([][}{)(\\])/\\$1/g;
		print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	    }
	    print STDERR ("HIT COMMAND:$_") if ($debug);
	    if (! defined($commands{$cmd})) {
		print STDERR "$host: found unexpected command - \"$cmd\"\n";
		$clean_run = 0;
		last TOP;
	    }
	    if (! defined(&{$commands{$cmd}})) {
		printf(STDERR "$host: undefined function - \"%s\"\n",  
		       $commands{$cmd});
		$clean_run = 0;
		last TOP;
	    }
	    $rval = &{$commands{$cmd}}($INPUT, $OUTPUT, $cmd);
	    delete($commands{$cmd});
	    if ($rval == -1) {
		$clean_run = 0;
		last TOP;
	    }
	}
    }
}

# This routine parses "show running-config"
sub ShowConfig {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In ShowConfig: $_" if ($debug);
    ProcessHistory("","","","\n!--WLC Begin Config Data--!\n");

    while (<$INPUT>) {
        tr/\015//d;
        tr/\020//d;

	next if (/^\s*rogue ap classify/);
	next if (/^\s*rogue (adhoc|client) alert/);

	$linecnt++;

	# These can not be imported, so comment them
	if (/^\s*cisco public safety is not allowed to set in this domain/i ||
	    /^\s*outdoor mesh ext.unii b domain channels:/i ||
	    /^\s*service port.*/i ||
	    /^\s*wlan express setup.*/i ||
	    /^\s*wmm-ac (disabled|enabled)/i) {
	    ProcessHistory("","","","!$_"); next;
	}

        # remove snmp community string data
	if (/^(\s*snmp community create)/ && $filter_pwds >= 1) {
	    ProcessHistory("","","","!$1 <removed>\n"); next;
	}
	if (/^(\s*snmp community accessmode (ro|rw))/ && $filter_pwds >= 1) {
	    ProcessHistory("","","","!$1 <removed>\n"); next;
	}
	if (/^(\s*snmp community ipaddr\s\S+\s\S+) / && $filter_pwds >= 1) {
	    ProcessHistory("","","","!$1 <removed>\n"); next;
	}

	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);

	$linecnt++;
	if (! /^$prompt/) {
	    print(STDERR "      ShowConfig Data: $_") if ($debug);
	    ProcessHistory("","","","$_");
	}
    }
    ProcessHistory("","","","\n!--WLC End Config Data--!\n");
    print STDERR "    Exiting ShowConfig: $_" if ($debug);
    # WLC lacks a definitive "end of config" marker.
    if ($linecnt > 5) {
	$found_end = 1;
	return(1);
    }
    return(0);
}

# This routine parses "show sysinfo"
sub ShowSysinfo {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowSysinfo: $_" if ($debug);
    ProcessHistory("","","","\n!WLC Show Sysinfo Start\n!\n");

    while (<$INPUT>) {
	tr/\015//d;

	my($skipprocess) = 0;

	if (/^System Up Time/) { $skipprocess = 1; }
	if (/^fan status/i) { $skipprocess = 1; }
	if (/^Number of Active Clients/) { $skipprocess = 1; }
	if (/^OUI Classification Failure Count/) { $skipprocess = 1; }
	if (/^(internal|external) temperature/i) { $skipprocess=1; }
	if (/rpm$/) { $skipprocess = 1; }

	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	if (! /^$prompt/) {
		if (! $skipprocess) {
			print STDERR "      ShowSysinfo Data: $_" if ($debug);
			ProcessHistory("","","","! $_");
		}
	}
    }
    ProcessHistory("","","","!\n!WLC Show Sysinfo End\n");
    print STDERR "    Exiting ShowSysinfo: $_" if ($debug);
    return(0);
}

# This routine parses "show udi"
sub ShowUdi {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowUdi: $_" if ($debug);
    ProcessHistory("","","","\n!WLC Show Udi Start\n!\n");

    while (<$INPUT>) {
	tr/\015//d;

	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	print STDERR "      ShowUdi Data: $_" if ($debug);
	ProcessHistory("","","","! $_");
    }
    ProcessHistory("","","","!\n!WLC Show Udi End\n");
    print STDERR "    Exiting ShowSysinfo: $_" if ($debug);
    return(0);
}

1;
